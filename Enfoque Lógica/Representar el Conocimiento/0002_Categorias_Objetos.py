"""
Pr√°cticas de Inteligencia Artificial
Enfoque: Representar el Conocimiento
Subtema: Taxonom√≠as ‚Äì Categor√≠as y Objetos

Este programa implementa una taxonom√≠a b√°sica usando estructuras de Python.
Una taxonom√≠a es una jerarqu√≠a de categor√≠as o clases que organizan objetos
por niveles de generalidad. Este modelo permite razonar sobre los objetos en funci√≥n
de su posici√≥n en la jerarqu√≠a (herencia de propiedades, pertenencia, etc.).
"""

# ---------- DEFINICI√ìN DE LA TAXONOM√çA ----------

# Diccionario de categor√≠as: cada categor√≠a tiene un nombre, un padre (supercategor√≠a)
# y una lista de propiedades.
categorias = {
    "Entidad": {
        "padre": None,
        "propiedades": ["existe"]
    },
    "Objeto F√≠sico": {
        "padre": "Entidad",
        "propiedades": ["ocupa espacio", "tiene masa"]
    },
    "Animal": {
        "padre": "Objeto F√≠sico",
        "propiedades": ["vive", "se mueve"]
    },
    "Planta": {
        "padre": "Objeto F√≠sico",
        "propiedades": ["vive", "fotosintetiza"]
    },
    "Mam√≠fero": {
        "padre": "Animal",
        "propiedades": ["es de sangre caliente", "tiene pelo"]
    },
    "Ave": {
        "padre": "Animal",
        "propiedades": ["tiene plumas", "pone huevos"]
    },
    "Perro": {
        "padre": "Mam√≠fero",
        "propiedades": ["ladra"]
    },
    "Gato": {
        "padre": "Mam√≠fero",
        "propiedades": ["ma√∫lla"]
    },
    "P√°jaro": {
        "padre": "Ave",
        "propiedades": ["canta"]
    }
}

# Instancias (objetos) con su categor√≠a asociada
objetos = {
    "firulais": "Perro",
    "garfield": "Gato",
    "piolin": "P√°jaro",
    "roble": "Planta"
}

# ---------- FUNCIONES PARA CONSULTAR Y MOSTRAR ----------

def obtener_propiedades_heredadas(categoria):
    """Devuelve todas las propiedades de una categor√≠a, incluyendo las heredadas"""
    propiedades = []
    actual = categoria
    while actual is not None:
        propiedades = categorias[actual]["propiedades"] + propiedades
        actual = categorias[actual]["padre"]
    return propiedades

def imprimir_taxonomia():
    """Imprime la jerarqu√≠a de la taxonom√≠a"""
    print("\nüìÇ Jerarqu√≠a de Categor√≠as:")
    def imprimir_subcategorias(cat, nivel=0):
        print("  " * nivel + f"üì¶ {cat}")
        for subcat in categorias:
            if categorias[subcat]["padre"] == cat:
                imprimir_subcategorias(subcat, nivel + 1)
    imprimir_subcategorias("Entidad")

def imprimir_objetos():
    """Imprime los objetos y sus propiedades heredadas"""
    print("\nüì¶ Objetos y sus propiedades:")
    for nombre, tipo in objetos.items():
        props = obtener_propiedades_heredadas(tipo)
        print(f" - {nombre} ({tipo}): {', '.join(props)}")

# ---------- EJECUCI√ìN DEL SISTEMA ----------

print("=" * 60)
print("üîé Taxonom√≠a: Categor√≠as y Objetos")
print("=" * 60)

imprimir_taxonomia()
imprimir_objetos()
