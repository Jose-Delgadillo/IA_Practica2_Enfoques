"""
Pr√°cticas de Inteligencia Artificial
Enfoque: L√≥gica
Subtema: Otras L√≥gicas ‚Äì L√≥gica Difusa

Este programa integra tres conceptos clave de la l√≥gica difusa:

1. Conjuntos Difusos:
   Se definen funciones de pertenencia que devuelven un grado entre 0 y 1.
   Por ejemplo, la temperatura 15¬∞C puede pertenecer en 0.5 al conjunto "fr√≠o".

2. Inferencia Difusa:
   Se aplican reglas l√≥gicas difusas del tipo:
   - SI temperatura ES fr√≠a ENTONCES calefacci√≥n ES alta
   - SI temperatura ES caliente ENTONCES calefacci√≥n ES baja

   Se usa un m√©todo tipo Mamdani con reglas simples para inferir la salida.

3. Fuzzy CLIPS (simulado):
   No se usa el motor real de CLIPS, pero se simula un sistema de reglas
   con conjuntos difusos y salidas aproximadas.

Todo implementado en Python puro, sin m√≥dulos externos.
"""

# ---------- 1. CONJUNTOS DIFUSOS ----------

# Funci√≥n de pertenencia difusa para "fr√≠o"
def frio(x):
    if x <= 10:
        return 1.0
    elif 10 < x < 20:
        return (20 - x) / 10.0
    else:
        return 0.0

# Funci√≥n de pertenencia difusa para "caliente"
def caliente(x):
    if x <= 20:
        return 0.0
    elif 20 < x < 30:
        return (x - 20) / 10.0
    else:
        return 1.0

# Funci√≥n de pertenencia para "calefacci√≥n alta"
def calef_alta(x):
    if x <= 5:
        return 1.0
    elif 5 < x < 10:
        return (10 - x) / 5.0
    else:
        return 0.0

# Funci√≥n de pertenencia para "calefacci√≥n baja"
def calef_baja(x):
    if x <= 0:
        return 0.0
    elif 0 < x < 5:
        return x / 5.0
    else:
        return 1.0

# ---------- 2. INFERENCIA DIFUSA ----------

# Sistema difuso tipo Mamdani simplificado
def inferir_calefaccion(temp):
    # Grado de pertenencia a los conjuntos
    grado_frio = frio(temp)
    grado_caliente = caliente(temp)

    # Reglas difusas:
    # 1) SI temperatura ES fr√≠a ‚Üí calefacci√≥n alta
    # 2) SI temperatura ES caliente ‚Üí calefacci√≥n baja

    # Inferencia: combinar m√≠nimos
    calef_alta_salida = grado_frio  # activaci√≥n de la regla 1
    calef_baja_salida = grado_caliente  # activaci√≥n de la regla 2

    # Agregaci√≥n: promedio ponderado (m√©todo del centroide simplificado)
    salida_total = (
        calef_alta_salida * 8 +  # centro de "alta" es 8
        calef_baja_salida * 2    # centro de "baja" es 2
    )
    suma_grados = calef_alta_salida + calef_baja_salida

    if suma_grados == 0:
        return 0  # no se activa ninguna regla
    return salida_total / suma_grados

# ---------- 3. "Fuzzy CLIPS" SIMULADO ----------

def fuzzy_motor(temp):
    print(f"\nüí° Temperatura actual: {temp}¬∞C")
    print(f"- Grado de 'fr√≠o': {frio(temp):.2f}")
    print(f"- Grado de 'caliente': {caliente(temp):.2f}")

    resultado = inferir_calefaccion(temp)
    print(f"üî• Nivel de calefacci√≥n recomendado (0-10): {resultado:.2f}")

# ---------- PRUEBAS ----------

print("Simulaci√≥n de l√≥gica difusa para control de calefacci√≥n")
print("=" * 60)
for temperatura in [5, 10, 15, 20, 25, 30, 35]:
    fuzzy_motor(temperatura)
